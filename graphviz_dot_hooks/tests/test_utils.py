import os
import shutil
from collections import namedtuple
import tempfile

from graphviz_dot_hooks.utils import (
    _render_dotfile,
    _parse_only_convert,
    read_file,
    render_dotfiles,
)

CUR_DIR = os.path.dirname(os.path.abspath(__file__))
VALID_DOT_SAMPLE_1 = os.path.join(CUR_DIR, "valid_dot_sample1.dot")
INVALID_DOT_SAMPLE_1 = os.path.join(CUR_DIR, "invalid_dot_sample1.yml")

args_tuple = namedtuple("args", "instancefiles")


def test__parse_only_convert__no_target__use_defaut_format():
    assert _parse_only_convert("s1.dot", format="svg") == {"s1.dot": "s1.dot.svg"}


def test__parse_only_convert__target__use_defaut_format():
    assert _parse_only_convert("s1.dot:renamed.png", format="png") == {
        "s1.dot": "renamed.png"
    }


def test__parse_only_convert__mixed_case__use_defaut_format():
    assert _parse_only_convert(
        "./some_dir/s0.dot, s1.dot:renamed.png", format="png"
    ) == {
        "./some_dir/s0.dot": "./some_dir/s0.dot.png",
        "s1.dot": "renamed.png",
    }


def test__render_dotfile__as_png_not_exist_yet__generate_and_return_false(tmpdir):
    copied_filepath = tmpdir + "/" + os.path.basename(VALID_DOT_SAMPLE_1)
    shutil.copy(VALID_DOT_SAMPLE_1, copied_filepath)

    expected_filepath = copied_filepath + ".png"
    assert not os.path.exists(expected_filepath)

    ok, msg = _render_dotfile(
        src_dot_filepath=copied_filepath,
        target_filepath=expected_filepath,
        format="png",
    )

    assert not ok
    assert "Re-generated" in msg

    assert os.path.exists(expected_filepath)
    assert os.path.exists(copied_filepath)


def test__render_dotfile__as_svg_not_exist_yet__generate_and_return_false(tmpdir):
    copied_filepath = tmpdir + "/" + os.path.basename(VALID_DOT_SAMPLE_1)
    shutil.copy(VALID_DOT_SAMPLE_1, copied_filepath)

    expected_filepath = copied_filepath + ".svg"
    assert not os.path.exists(expected_filepath)

    ok, msg = _render_dotfile(
        src_dot_filepath=copied_filepath,
        target_filepath=expected_filepath,
        format="svg",
    )

    assert not ok
    assert "Re-generated" in msg

    expected_svg = (
        b'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<!DOCTYPE svg PUB'
        b'LIC "-//W3C//DTD SVG 1.1//EN"\n "http://www.w3.org/Graphics/SVG/1.1/DTD/s'
        b'vg11.dtd">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title'
        b': D Pages: 1 -->\n<svg width="188pt" height="116pt"\n viewBox="0.00 0.00 1'
        b'88.00 116.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.'
        b'org/1999/xlink">\n<g id="graph0" class="graph" transform="scale(1 1) rota'
        b'te(0) translate(4 112)">\n<title>D</title>\n<polygon fill="white" stroke="'
        b'transparent" points="-4,4 -4,-112 184,-112 184,4 -4,4"/>\n<!-- A -->\n<g i'
        b'd="node1" class="node">\n<title>A</title>\n<polygon fill="none" stroke="bl'
        b'ack" points="90,-108 63,-90 90,-72 117,-90 90,-108"/>\n<text text-anchor='
        b'"middle" x="90" y="-86.3" font-family="Times,serif" font-size="14.00">A</tex'
        b't>\n</g>\n<!-- B -->\n<g id="node2" class="node">\n<title>B</title>\n<pol'
        b'ygon fill="none" stroke="black" points="54,-36 0,-36 0,0 54,0 54,-36"/>\n'
        b'<text text-anchor="middle" x="27" y="-14.3" font-family="Times,serif" font-s'
        b'ize="14.00">B</text>\n</g>\n<!-- A&#45;&gt;B -->\n<g id="edge1" class="edge'
        b'">\n<title>A&#45;&gt;B</title>\n<path fill="none" stroke="grey" stroke-das'
        b'harray="5,2" d="M80.43,-78.37C72.13,-69.14 59.79,-55.44 49.07,-43.52"/>\n'
        b'<polygon fill="grey" stroke="grey" points="51.6,-41.1 42.31,-36.01 46.4,-45.'
        b'78 51.6,-41.1"/>\n</g>\n<!-- C -->\n<g id="node3" class="node">\n<title>C</t'
        b'itle>\n<ellipse fill="none" stroke="black" cx="90" cy="-18" rx="18" ry="1'
        b'8"/>\n<text text-anchor="middle" x="90" y="-14.3" font-family="Times,seri'
        b'f" font-size="14.00">C</text>\n</g>\n<!-- A&#45;&gt;C -->\n<g id="edge2" cl'
        b'ass="edge">\n<title>A&#45;&gt;C</title>\n<path fill="none" stroke="black" '
        b'd="M88,-71.7C88,-63.98 88,-54.71 88,-46.11"/>\n<path fill="none" stroke="'
        b'transparent" d="M90,-71.7C90,-63.98 90,-54.71 90,-46.11"/>\n<path fill="n'
        b'one" stroke="black" d="M92,-71.7C92,-63.98 92,-54.71 92,-46.11"/>\n<polyg'
        b'on fill="black" stroke="black" points="93.5,-46.1 90,-36.1 86.5,-46.1 93.5,-'
        b'46.1"/>\n</g>\n<!-- D -->\n<g id="node4" class="node">\n<title>D</title>'
        b'\n<ellipse fill="none" stroke="black" cx="153" cy="-18" rx="27" ry="18"/>'
        b'\n<text text-anchor="middle" x="153" y="-14.3" font-family="Times,serif" '
        b'font-size="14.00">D</text>\n</g>\n<!-- A&#45;&gt;D -->\n<g id="edge3" class'
        b'="edge">\n<title>A&#45;&gt;D</title>\n<path fill="none" stroke="black" str'
        b'oke-width="5" d="M99.57,-78.37C110.24,-66.51 127.58,-47.25 139.59,-33.89'
        b'"/>\n</g>\n</g>\n</svg>\n'
    )
    svg_content = read_file(expected_filepath)
    assert svg_content == expected_svg

    assert os.path.exists(expected_filepath)
    assert os.path.exists(copied_filepath)


def test_render_dotfiles__not_exist_yet__return_false():
    with tempfile.TemporaryDirectory() as tmpdir_path:
        copied_filepath = tmpdir_path + "/" + os.path.basename(VALID_DOT_SAMPLE_1)
        shutil.copy(VALID_DOT_SAMPLE_1, copied_filepath)

        expected_png_filepath = copied_filepath + ".png"
        assert not os.path.exists(expected_png_filepath)

        ok, msgs = render_dotfiles(
            {copied_filepath: expected_png_filepath}, format="png"
        )
        assert not ok
        assert len(msgs) == 1
        assert "Re-generated" in msgs[0]

        assert os.path.exists(expected_png_filepath)
        assert os.path.exists(copied_filepath)


def test_render_dotfiles__exist_already_but_outdated__return_true():
    with tempfile.TemporaryDirectory() as tmpdir_path:
        copied_filepath = tmpdir_path + "/" + os.path.basename(VALID_DOT_SAMPLE_1)
        shutil.copy(VALID_DOT_SAMPLE_1, copied_filepath)

        expected_png_filepath = copied_filepath + ".png"

        with open(expected_png_filepath, "w") as f:
            f.write("whatever")

        assert os.path.exists(expected_png_filepath)

        ok, msgs = render_dotfiles(
            {copied_filepath: expected_png_filepath}, format="png"
        )
        assert not ok
        assert len(msgs) == 1
        assert "Re-generated" in msgs[0]

        assert os.path.exists(expected_png_filepath)
        assert os.path.exists(copied_filepath)


def test_render_dotfiles__exist_already_uptodate__return_true():
    with tempfile.TemporaryDirectory() as tmpdir_path:
        copied_filepath = tmpdir_path + "/" + os.path.basename(VALID_DOT_SAMPLE_1)
        shutil.copy(VALID_DOT_SAMPLE_1, copied_filepath)

        expected_png_filepath = copied_filepath + ".png"

        # Let it create it on its own
        ok, _ = render_dotfiles({copied_filepath: expected_png_filepath}, format="png")
        assert not ok

        assert os.path.exists(expected_png_filepath)
        assert os.path.exists(copied_filepath)

        # Call it a second time
        ok, msgs = render_dotfiles(
            {copied_filepath: expected_png_filepath}, format="png"
        )
        assert ok
        assert not msgs
